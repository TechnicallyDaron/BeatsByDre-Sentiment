# -*- coding: utf-8 -*-
"""P3.S4.3

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1R0DFtNhVTxmNm261Cy7eK57lw65AfxLR
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv('merged_data.csv')
df.head()

df.isnull().sum()

df.dtypes

##Clean DataSet
df['timestamp'] = pd.to_datetime(df['timestamp'], errors = 'coerce')

df[['review_id','product_id','profile_id']].head()

df['product_id'].head()

df = df.loc[~df['product_id'].str.contains('Error while parsing `asin`', na = False)]
df.loc[df['product_id'].str.contains('Error while parsing', na = False)]

df.shape

df = pd.read_csv('merged_data.csv')
df.head()

df['product_id'].unique()
df = df.drop('product_id', axis = 1)

df = df.loc[~df['content'].str.contains('function()', na=False)]

df['content'].head()

df.isnull().sum()
df.dtypes

df['product_attributes'].head()

df.to_csv('cleaned_data.csv', index=False)
df_clean = pd.read_csv('cleaned_data.csv')

df_clean.head()

##Dataset Cleaned

## Start Vizualization Ratings
plt.figure(figsize = (10,5))
sns.histplot(data = df, x = 'rating', kde = True)
plt.title('Distribution of Ratings')
plt.xlabel('Rating')
plt.ylabel('Frequency')
plt.show()

## Start Vizualization Attributes Histogram

df['product_attributes'].head(30)
df['color'] = df['product_attributes'].apply(lambda x: x.split(':')[1].split(',')[0] if "Color" in x else None)
df = df[~df['color'].str.contains('Flip', na = False)]
color_counts = df['color'].value_counts()


sns.barplot(x=color_counts.index, y=color_counts.values)
plt.title('Most Common Product Colors')
plt.xlabel('Color')
plt.ylabel('# of Reviews')
plt.xticks(rotation = 90)

#Word Cloud
from wordcloud import WordCloud

text = " ".join(review for review in df['content'].dropna())

wordcloud = WordCloud(width=800, height=400, background_color='white').generate(text)

plt.figure(figsize=(10, 5))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis('off')
plt.title("Most Common Words in Reviews", fontsize=16)
plt.show()

#Weighted Word Cloud

high_rated = " ".join(review for review in df[df['rating'] >= 4]['content'].dropna())
low_rated = " ".join(review for review in df[df['rating'] <= 2]['content'].dropna())
high_wordcloud = WordCloud(width=800, height=400, background_color='white').generate(high_rated)
low_wordcloud = WordCloud(width=800, height=400, background_color='white').generate(low_rated)

fig, axs = plt.subplots(1, 2, figsize=(15, 7))
axs[0].imshow(high_wordcloud, interpolation='bilinear')
axs[0].axis('off')
axs[0].set_title("High-Rated Reviews", fontsize=14)
axs[1].imshow(low_wordcloud, interpolation='bilinear')
axs[1].axis('off')
axs[1].set_title("Low-Rated Reviews", fontsize=14)
plt.tight_layout()
plt.show()

import nltk

# Download required NLTK datasets
nltk.download('punkt', download_dir='/root/nltk_data')  # Download punkt tokenizer
nltk.download('punkt_tab', download_dir='/root/nltk_data')  # Download punkt_tab resource
nltk.download('stopwords', download_dir='/root/nltk_data')  # Download stopwords


nltk.data.path.append('/root/nltk_data')

import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd
from collections import Counter
from nltk.tokenize import word_tokenize
from nltk.corpus import stopwords
import string

#Word Frequency Chart
five_star_reviews = " ".join(review for review in df[df['rating'] == 5]['content'].dropna())
tokens = word_tokenize(five_star_reviews.lower())

stop_words = set(stopwords.words('english'))
tokens = [word for word in tokens if word.isalpha() and word not in stop_words]

common_words = Counter(tokens).most_common(10)
common_words_df = pd.DataFrame(common_words, columns=['Word', 'Count'])

sns.barplot(x='Count', y='Word', data=common_words_df, palette='viridis')
plt.title("Top 10 Words in 5-Star Reviews", fontsize=16)
plt.xlabel("Frequency")
plt.ylabel("Words")
plt.show()

#Comparitive Word Frequencies
words_to_compare = ['battery', 'price', 'quality']

word_freq_by_rating = {word: df[df['content'].str.contains(word, case=False, na=False)]['rating'].value_counts() for word in words_to_compare}

freq_df = pd.DataFrame(word_freq_by_rating).fillna(0)

freq_df.plot(kind='bar', figsize=(10, 6), colormap='coolwarm')
plt.title("Word Frequency by Rating", fontsize=16)
plt.xlabel("Star Rating")
plt.ylabel("Frequency")
plt.legend(title="Words", loc="upper right")
plt.show()

#Review Count by Rating
rating_counts = df['rating'].value_counts().sort_index()

sns.barplot(x=rating_counts.index, y=rating_counts.values, palette='viridis')
plt.title("Review Count by Rating", fontsize=16)
plt.xlabel("Rating")
plt.ylabel("Number of Reviews")
plt.show()

# Box plot of ratings
sns.boxplot(x='rating', y='rating', data=df, palette='Set3')
plt.title("Distribution of Ratings", fontsize=16)
plt.xlabel("Rating")
plt.ylabel("Rating")
plt.show()